generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model checkpoints {
  id_checkpoint Int         @id
  numero        Int
  id_viaje      Int
  coordenadas   coordenadas @relation(fields: [id_checkpoint], references: [id_coordenadas], onDelete: NoAction, onUpdate: NoAction)
  viajes        viajes      @relation(fields: [id_viaje], references: [id_viaje], onDelete: NoAction, onUpdate: NoAction)
}

model conductores {
  id_conductor        String              @id @db.Uuid
  id_estado           Int
  usuarios            usuarios            @relation(fields: [id_conductor], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  estados_conductores estados_conductores @relation(fields: [id_estado], references: [id_estado], onDelete: NoAction, onUpdate: NoAction)
  fichas_medicas      fichas_medicas?
  licencias           licencias?
  vehiculos           vehiculos?
  viajes              viajes[]
}

model domicilios {
  id_domicilio                         Int         @id @default(autoincrement())
  calle                                String      @db.VarChar(50)
  numero                               Int
  piso                                 Int?
  depto                                String?     @db.VarChar(5)
  descripcion                          String?
  id_localidad                         Int
  id_usuario                           String?     @unique @db.Uuid
  localidades                          localidades @relation(fields: [id_localidad], references: [id_localidad], onDelete: NoAction, onUpdate: NoAction)
  usuarios                             usuarios?   @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  envios_envios_id_destinoTodomicilios envios[]    @relation("envios_id_destinoTodomicilios")
  envios_envios_id_origenTodomicilios  envios[]    @relation("envios_id_origenTodomicilios")
}

model envios {
  nro_seguimiento                          BigInt        @id
  descripcion                              String
  fecha                                    DateTime      @db.Date
  hora                                     DateTime      @db.Time(6)
  peso_gramos                              Decimal       @db.Decimal(10, 2)
  monto                                    Decimal       @db.Decimal(10, 2)
  reserva                                  Boolean       @default(false)
  id_cliente                               String        @db.Uuid
  id_estado                                Int           @default(1)
  id_origen                                Int
  id_destino                               Int
  created_at                               DateTime?     @default(now()) @db.Timestamp(6)
  usuarios                                 usuarios      @relation(fields: [id_cliente], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  domicilios_envios_id_destinoTodomicilios domicilios    @relation("envios_id_destinoTodomicilios", fields: [id_destino], references: [id_domicilio], onDelete: NoAction, onUpdate: NoAction)
  estados_envio                            estados_envio @relation(fields: [id_estado], references: [id_estado], onDelete: NoAction, onUpdate: NoAction)
  domicilios_envios_id_origenTodomicilios  domicilios    @relation("envios_id_origenTodomicilios", fields: [id_origen], references: [id_domicilio], onDelete: NoAction, onUpdate: NoAction)
  viajes                                   viajes?
}

model estados_conductores {
  id_estado   Int           @id @default(autoincrement())
  nombre      String        @unique @db.VarChar(20)
  conductores conductores[]
}

model estados_envio {
  id_estado Int      @id @default(autoincrement())
  nombre    String   @unique @db.VarChar(30)
  envios    envios[]
}

model fichas_medicas {
  id_ficha_medica         Int         @id @default(autoincrement())
  altura                  Int
  peso                    Decimal     @db.Decimal(10, 2)
  enfermedad_cardiaca     String?     @db.VarChar(50)
  enfermedad_respiratoria String?     @db.VarChar(50)
  alergias                String?     @db.VarChar(50)
  epilepsia               Boolean
  diabetes                Boolean
  compartir               Boolean
  id_conductor            String      @unique @db.Uuid
  conductores             conductores @relation(fields: [id_conductor], references: [id_conductor], onDelete: NoAction, onUpdate: NoAction)
}

model licencias {
  numero           Int         @id
  categoria        String      @db.VarChar(30)
  fechavencimiento DateTime    @db.Date
  id_conductor     String      @unique @db.Uuid
  conductores      conductores @relation(fields: [id_conductor], references: [id_conductor], onDelete: NoAction, onUpdate: NoAction)
}

model localidades {
  id_localidad  Int          @id @default(autoincrement())
  codigo_postal Int
  nombre        String       @db.VarChar(50)
  id_provincia  Int
  domicilios    domicilios[]
  provincias    provincias   @relation(fields: [id_provincia], references: [id_provincia], onDelete: NoAction, onUpdate: NoAction)
}

model marcas {
  id_marca Int       @id @default(autoincrement())
  nombre   String    @db.VarChar(30)
  modelos  modelos[]
}

model modelos {
  id_modelo Int         @id @default(autoincrement())
  nombre    String      @db.VarChar(30)
  id_marca  Int
  marcas    marcas      @relation(fields: [id_marca], references: [id_marca], onDelete: NoAction, onUpdate: NoAction)
  vehiculos vehiculos[]
}

model provincias {
  id_provincia Int           @id @default(autoincrement())
  nombre       String        @db.VarChar(50)
  localidades  localidades[]
}

model tipos_vehiculos {
  id_tipo_vehiculo Int         @id @default(autoincrement())
  nombre           String      @db.VarChar(30)
  vehiculos        vehiculos[]
}

model usuarios {
  id_usuario   String       @id @db.Uuid
  dni          Int          @unique
  email        String       @unique @db.VarChar(100)
  password     String       @unique @db.VarChar(100)
  fecha_nac    DateTime     @db.Date
  nombre       String       @db.VarChar(50)
  apellido     String       @db.VarChar(50)
  es_conductor Boolean
  telefono     String?      @db.VarChar(20)
  api_key      String       @unique @db.VarChar(100)
  is_active    Boolean      @default(true)
  conductores  conductores?
  domicilios   domicilios?
  envios       envios[]
}

model vehiculos {
  id_vehiculo      Int             @id @default(autoincrement())
  patente          String          @unique @db.VarChar(20)
  anio             Int
  color            String          @db.VarChar(15)
  descripcion      String?
  id_modelo        Int
  id_tipo_vehiculo Int
  id_conductor     String          @unique(map: "id_conductor_unique") @db.Uuid
  conductores      conductores     @relation(fields: [id_conductor], references: [id_conductor], onDelete: NoAction, onUpdate: NoAction)
  modelos          modelos         @relation(fields: [id_modelo], references: [id_modelo], onDelete: NoAction, onUpdate: NoAction)
  tipos_vehiculos  tipos_vehiculos @relation(fields: [id_tipo_vehiculo], references: [id_tipo_vehiculo], onDelete: NoAction, onUpdate: NoAction)
}

model viajes {
  id_viaje                                     Int           @id @default(autoincrement())
  checkpoint_actual                            Int           @default(1)
  fecha_inicio                                 DateTime?     @db.Timestamp(6)
  fecha_fin                                    DateTime?     @db.Timestamp(6)
  id_conductor                                 String        @db.Uuid
  nro_seguimiento                              BigInt        @unique
  origen_cord                                  Int
  destino_cord                                 Int
  checkpoints                                  checkpoints[]
  coordenadas_viajes_destino_cordTocoordenadas coordenadas   @relation("viajes_destino_cordTocoordenadas", fields: [destino_cord], references: [id_coordenadas], onDelete: NoAction, onUpdate: NoAction)
  conductores                                  conductores   @relation(fields: [id_conductor], references: [id_conductor], onDelete: NoAction, onUpdate: NoAction)
  envios                                       envios        @relation(fields: [nro_seguimiento], references: [nro_seguimiento], onDelete: NoAction, onUpdate: NoAction)
  coordenadas_viajes_origen_cordTocoordenadas  coordenadas   @relation("viajes_origen_cordTocoordenadas", fields: [origen_cord], references: [id_coordenadas], onDelete: NoAction, onUpdate: NoAction)
}

model coordenadas {
  id_coordenadas                          Int          @id @default(autoincrement())
  latitud                                 Float
  longitud                                Float
  checkpoints                             checkpoints?
  viajes_viajes_destino_cordTocoordenadas viajes[]     @relation("viajes_destino_cordTocoordenadas")
  viajes_viajes_origen_cordTocoordenadas  viajes[]     @relation("viajes_origen_cordTocoordenadas")
}
